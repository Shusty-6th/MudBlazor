// NOTE: this file is autogenerated. Any changes will be overwritten!
namespace MudBlazor.Docs.Models
{
    public static partial class DocStrings
    {

public const string MudBaseButton_ButtonType = @"The button Type (Button, Submit, Refresh)";

public const string MudBaseButton_Link = @"If set to a URL, clicking the button will open the referenced document. Use Target to specify where";

public const string MudBaseButton_Target = @"The target attribute specifies where to open the link, if Link is specified. Possible values: _blank | _self | _parent | _top | framename";

public const string MudBaseButton_ForceLoad = @"If true, force browser to redirect outside component router-space.";

public const string MudBaseButton_Command = @"Command executed when the user clicks on an element.";

public const string MudBaseButton_CommandParameter = @"Command parameter.";

public const string MudBaseButton_OnClick = @"Button click event.";

public const string MudBaseButton_Class = @"User class names, separated by space";

public const string MudBaseButton_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudBaseButton_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudBaseButton_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudBaseInputText_Disabled = @"If true, the input element will be disabled.";

public const string MudBaseInputText_ReadOnly = @"If true, the input will be read only.";

public const string MudBaseInputText_Error = @"If true, the label will be displayed in an error state.";

public const string MudBaseInputText_FullWidth = @"If true, the input will take up the full width of its container.";

public const string MudBaseInputText_DisableUnderLine = @"If true, the input will not have an underline.";

public const string MudBaseInputText_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

public const string MudBaseInputText_Placeholder = @"The short hint displayed in the input before the user enters a value.";

public const string MudBaseInputText_HelperText = @"If string has value, helpertext will be applied.";

public const string MudBaseInputText_AdornmentIcon = @"Icon that will be used if Adornment is set to Start or End.";

public const string MudBaseInputText_AdornmentText = @"Text that will be used if Adornment is set to Start or End, the Text overrides Icon.";

public const string MudBaseInputText_Adornment = @"Sets Start or End Adornment if not set to None.";

public const string MudBaseInputText_IconSize = @"Sets the Icon Size.";

public const string MudBaseInputText_OnAdornmentClick = @"Button click event if set and Adornment used.";

public const string MudBaseInputText_InputType = @"Type of the input element. It should be a valid HTML5 input type.";

public const string MudBaseInputText_Variant = @"Variant to use.";

public const string MudBaseInputText_Margin = @"Will adjust vertical spacing.";

public const string MudBaseInputText_ValueChanged = @"Fired when the Value property changes.";

public const string MudBaseInputText_Value = @"The value of this input element. This property is two-way bindable.";

public const string MudBaseInputText_Class = @"User class names, separated by space";

public const string MudBaseInputText_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudBaseInputText_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudBaseInputText_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudBasePicker_Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow set to 8 by default in inline mode and 0 in static mode.";

public const string MudBasePicker_Square = @"If true, border-radius is set to 0 this is set to true automaticly in static mode but can be overridden with Rounded bool.";

public const string MudBasePicker_Rounded = @"If true, border-radius is set to theme default when in Static Mode.";

public const string MudBasePicker_HelperText = @"If string has value, helpertext will be applied.";

public const string MudBasePicker_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

public const string MudBasePicker_Disabled = @"If true, the picker will be disabled.";

public const string MudBasePicker_DisableToolbar = @"Hide toolbar and show only date/time views.";

public const string MudBasePicker_PickerVariant = @"Picker container option";

public const string MudBasePicker_InputVariant = @"InputVariant, if Picker is static this option will not change anything.";

public const string MudBasePicker_Adornment = @"Sets if the icon will be att start or end, set to false to disable.";

public const string MudBasePicker_Orientation = @"What orientation to render in when in PickerVariant Static Mode.";

public const string MudBasePicker_IconSize = @"Sets the Icon Size.";

public const string MudBasePicker_Color = @"The color of the toolbar, selected and active. It supports the theme colors.";

public const string MudBasePicker_AllowKeyboardInput = @"Allows text input from keyboard.";

public const string MudBasePicker_ValueChanged = @"Fired when the value changes.";

public const string MudBasePicker_Value = @"The currently selected value represented as a string (two-way bindable)";

public const string MudBasePicker_Class = @"User class names, separated by space";

public const string MudBasePicker_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudBasePicker_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudBasePicker_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudBaseSelectItem_Disabled = @"If true, the input element will be disabled.";

public const string MudBaseSelectItem_DisableRipple = @"If true, disables ripple effect.";

public const string MudBaseSelectItem_Href = @"Link to a URL when clicked.";

public const string MudBaseSelectItem_ChildContent = @"Child content of component.";

public const string MudBaseSelectItem_CommandParameter = @"Command parameter.";

public const string MudBaseSelectItem_Command = @"Command executed when the user clicks on an element.";

public const string MudBaseSelectItem_OnClick = @"";

public const string MudBaseSelectItem_Class = @"User class names, separated by space";

public const string MudBaseSelectItem_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudBaseSelectItem_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudBaseSelectItem_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudComponentBase_Class = @"User class names, separated by space";

public const string MudComponentBase_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudComponentBase_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudComponentBase_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudAlert_Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow.";

public const string MudAlert_Square = @"If true, rounded corners are disabled.";

public const string MudAlert_Dense = @"If true, compact padding will be used.";

public const string MudAlert_NoIcon = @"If true, no alert icon will be used.";

public const string MudAlert_Severity = @"The severity of the alert. This defines the color and icon used.";

public const string MudAlert_Variant = @"The variant to use.";

public const string MudAlert_Class = @"User class names, separated by space.";

public const string MudAlert_ChildContent = @"Child content of the component.";

public const string MudAppBar_Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow.";

public const string MudAppBar_Dense = @"If true, compact padding will be used.";

public const string MudAppBar_Color = @"The color of the component. It supports the theme colors.";

public const string MudAppBar_Position = @"The positioning type. The behavior of the different options is described in the MDN web docs. Note: sticky is not universally supported and will fall back to static when unavailable.";

public const string MudAppBar_ChildContent = @"Child content of the component.";

public const string MudAppBar_Class = @"User class names, separated by space";

public const string MudAppBar_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudAppBar_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudAppBar_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudButton_StartIcon = @"Icon placed before the text if set.";

public const string MudButton_EndIcon = @"Icon placed before the text if set.";

public const string MudButton_Color = @"The color of the component. It supports the theme colors.";

public const string MudButton_Size = @"The Size of the component.";

public const string MudButton_Variant = @"The variant to use.";

public const string MudButton_Disabled = @"If true, the button will be disabled.";

public const string MudButton_DisableElevation = @"If true, no drop-shadow will be used.";

public const string MudButton_DisableRipple = @"If true, disables ripple effect.";

public const string MudButton_ChildContent = @"Child content of component.";

public const string MudButton_ButtonType = @"The button Type (Button, Submit, Refresh)";

public const string MudButton_Link = @"If set to a URL, clicking the button will open the referenced document. Use Target to specify where";

public const string MudButton_Target = @"The target attribute specifies where to open the link, if Link is specified. Possible values: _blank | _self | _parent | _top | framename";

public const string MudButton_ForceLoad = @"If true, force browser to redirect outside component router-space.";

public const string MudButton_Command = @"Command executed when the user clicks on an element.";

public const string MudButton_CommandParameter = @"Command parameter.";

public const string MudButton_OnClick = @"Button click event.";

public const string MudButton_Class = @"User class names, separated by space";

public const string MudButton_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudButton_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudButton_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudFab_Color = @"The color of the component. It supports the theme colors.";

public const string MudFab_Size = @"The Size of the component.";

public const string MudFab_Icon = @"If applied Icon will be added to the component.";

public const string MudFab_Label = @"If applied the text will be added to the component.";

public const string MudFab_Disabled = @"If true, the button will be disabled.";

public const string MudFab_DisableElevation = @"If true, no drop-shadow will be used.";

public const string MudFab_DisableRipple = @"If true, disables ripple effect.";

public const string MudFab_ButtonType = @"The button Type (Button, Submit, Refresh)";

public const string MudFab_Link = @"If set to a URL, clicking the button will open the referenced document. Use Target to specify where";

public const string MudFab_Target = @"The target attribute specifies where to open the link, if Link is specified. Possible values: _blank | _self | _parent | _top | framename";

public const string MudFab_ForceLoad = @"If true, force browser to redirect outside component router-space.";

public const string MudFab_Command = @"Command executed when the user clicks on an element.";

public const string MudFab_CommandParameter = @"Command parameter.";

public const string MudFab_OnClick = @"Button click event.";

public const string MudFab_Class = @"User class names, separated by space";

public const string MudFab_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudFab_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudFab_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudIconButton_Icon = @"The Icon that will be used in the component.";

public const string MudIconButton_Color = @"The color of the component. It supports the theme colors.";

public const string MudIconButton_Size = @"The Size of the component.";

public const string MudIconButton_Edge = @"If set uses a negative margin.";

public const string MudIconButton_DisableRipple = @"If true, disables ripple effect.";

public const string MudIconButton_Disabled = @"If true, the button will be disabled.";

public const string MudIconButton_ChildContent = @"Child content of component, only shows if Icon is null or Empty.";

public const string MudIconButton_ButtonType = @"The button Type (Button, Submit, Refresh)";

public const string MudIconButton_Link = @"If set to a URL, clicking the button will open the referenced document. Use Target to specify where";

public const string MudIconButton_Target = @"The target attribute specifies where to open the link, if Link is specified. Possible values: _blank | _self | _parent | _top | framename";

public const string MudIconButton_ForceLoad = @"If true, force browser to redirect outside component router-space.";

public const string MudIconButton_Command = @"Command executed when the user clicks on an element.";

public const string MudIconButton_CommandParameter = @"Command parameter.";

public const string MudIconButton_OnClick = @"Button click event.";

public const string MudIconButton_Class = @"User class names, separated by space";

public const string MudIconButton_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudIconButton_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudIconButton_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudCardMedia_Title = @"";

public const string MudCardMedia_Image = @"";

public const string MudCardMedia_Height = @"";

public const string MudCardMedia_Class = @"User class names, separated by space";

public const string MudCardMedia_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudCardMedia_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudCardMedia_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudChartBase_InputData = @"";

public const string MudChartBase_InputLabels = @"";

public const string MudChartBase_XAxisLabels = @"";

public const string MudChartBase_ChartSeries = @"";

public const string MudChartBase_ChartType = @"The Type of the chart.";

public const string MudChartBase_Width = @"The Width of the chart, end with % or px.";

public const string MudChartBase_Height = @"The Height of the chart, end with % or px.";

public const string MudChartBase_LegendPosition = @"The placment direction of the legend if used.";

public const string MudChartBase_DisplayLegendItemValues = @"If true, the Data Values will be displayed next to the Legend Labels.";

public const string MudChartBase_Class = @"User class names, separated by space";

public const string MudChartBase_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudChartBase_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudChartBase_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudCheckBox_Color = @"The color of the component. It supports the theme colors.";

public const string MudCheckBox_Label = @"If applied the text will be added to the component.";

public const string MudCheckBox_DisableRipple = @"If true, disables ripple effect.";

public const string MudCheckBox_Disabled = @"If true, the checkbox will be disabled.";

public const string MudCheckBox_ChildContent = @"Child content of component.";

public const string MudCheckBox_CheckedChanged = @"A callback when CheckedChanges.";

public const string MudCheckBox_Checked = @"";

public const string MudCheckBox_Class = @"User class names, separated by space";

public const string MudCheckBox_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudCheckBox_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudCheckBox_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudChip_Color = @"The color of the component.";

public const string MudChip_Size = @"The size of the button. small is equivalent to the dense button styling.";

public const string MudChip_ChildContent = @"Child content of component.";

public const string MudChip_Class = @"User class names, separated by space";

public const string MudChip_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudChip_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudChip_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudDatePicker_MaxDate = @"Max selectable date.";

public const string MudDatePicker_MinDate = @"Max selectable date.";

public const string MudDatePicker_OpenTo = @"First view to show in the MudDatePicker.";

public const string MudDatePicker_InputIcon = @"Sets the Input Icon.";

public const string MudDatePicker_Date = @"The currently selected date (two-way bindable). If null, then nothing was selected.";

public const string MudDatePicker_DateChanged = @"Fired when the date changes.";

public const string MudDatePicker_FirstDayOfWeek = @"Defines on which day the week starts. Depends on the value of Culture.";

public const string MudDatePicker_PickerMonth = @"The current month of the date picker (two-way bindable). This changes when the user browses through the calender.
            The month is represented as a DateTime which is always the first day of that month. You can also set this to define which month is initially shown. If not set, the current month is shown.";

public const string MudDatePicker_PickerMonthChanged = @"Fired when the date changes.";

public const string MudDatePicker_Culture = @"The display culture";

public const string MudDatePicker_ClosingDelay = @"Milliseconds to wait before closing the picker. This helps the user see that the date was selected before the popover disappears.";

public const string MudDatePicker_Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow set to 8 by default in inline mode and 0 in static mode.";

public const string MudDatePicker_Square = @"If true, border-radius is set to 0 this is set to true automaticly in static mode but can be overridden with Rounded bool.";

public const string MudDatePicker_Rounded = @"If true, border-radius is set to theme default when in Static Mode.";

public const string MudDatePicker_HelperText = @"If string has value, helpertext will be applied.";

public const string MudDatePicker_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

public const string MudDatePicker_Disabled = @"If true, the picker will be disabled.";

public const string MudDatePicker_DisableToolbar = @"Hide toolbar and show only date/time views.";

public const string MudDatePicker_PickerVariant = @"Picker container option";

public const string MudDatePicker_InputVariant = @"InputVariant, if Picker is static this option will not change anything.";

public const string MudDatePicker_Adornment = @"Sets if the icon will be att start or end, set to false to disable.";

public const string MudDatePicker_Orientation = @"What orientation to render in when in PickerVariant Static Mode.";

public const string MudDatePicker_IconSize = @"Sets the Icon Size.";

public const string MudDatePicker_Color = @"The color of the toolbar, selected and active. It supports the theme colors.";

public const string MudDatePicker_AllowKeyboardInput = @"Allows text input from keyboard.";

public const string MudDatePicker_ValueChanged = @"Fired when the value changes.";

public const string MudDatePicker_Value = @"The currently selected value represented as a string (two-way bindable)";

public const string MudDatePicker_Class = @"User class names, separated by space";

public const string MudDatePicker_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudDatePicker_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudDatePicker_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudDialog_DialogContent = @"";

public const string MudDialog_DialogActions = @"";

public const string MudDialog_DisableSidePadding = @"";

public const string MudDialog_ClassContent = @"";

public const string MudDialog_ClassActions = @"";

public const string MudDialog_Class = @"User class names, separated by space";

public const string MudDialog_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudDialog_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudDialog_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudExpansionPanel_Text = @"The text to be displayed in the expansion panel.";

public const string MudExpansionPanel_IsExpanded = @"";

public const string MudExpansionPanel_Disabled = @"If true, the component will be disabled.";

public const string MudExpansionPanel_ChildContent = @"Child content of component.";

public const string MudExpansionPanel_Class = @"User class names, separated by space";

public const string MudExpansionPanel_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudExpansionPanel_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudExpansionPanel_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudExpansionPanels_Square = @"If true, border-radius is set to 0.";

public const string MudExpansionPanels_MultiExpansion = @"If true, multiple panels can be expanded at the same time.";

public const string MudExpansionPanels_Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow.";

public const string MudExpansionPanels_ChildContent = @"Child content of component.";

public const string MudExpansionPanels_Class = @"User class names, separated by space";

public const string MudExpansionPanels_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudExpansionPanels_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudExpansionPanels_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudForm_ChildContent = @"Child content of component.";

public const string MudForm_Class = @"User class names, separated by space";

public const string MudForm_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudForm_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudForm_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudHidden_Breakpoint = @"The screen size(s) depending on which the ChildContent should not be rendered (or should be, if Invert is true)";

public const string MudHidden_Invert = @"Inverts the Breakpoint, so that the ChildContent is only rendered when the breakpoint matches the screen size.";

public const string MudHidden_ChildContent = @"Child content of component.";

public const string MudHidden_Class = @"User class names, separated by space";

public const string MudHidden_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudHidden_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudHidden_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudIcon_Icon = @"If set will display an SVG Icon.";

public const string MudIcon_FontIcon = @"If set will display Font Icon.";

public const string MudIcon_FontClass = @"Font Icon Class, only applies if Font Icon is used.";

public const string MudIcon_Size = @"The Size of the icon.";

public const string MudIcon_Color = @"The color of the component. It supports the theme colors.";

public const string MudIcon_ChildContent = @"Child content of component.";

public const string MudIcon_Class = @"User class names, separated by space";

public const string MudIcon_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudIcon_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudIcon_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudInputControl_Label = @"If string has value, label text will be added.";

public const string MudInputControl_FullWidth = @"If true, the component will take up the full width of its container.";

public const string MudInputControl_HelperText = @"If string has value, helpertext will be applied.";

public const string MudInputControl_Margin = @"If dense or normal, will adjust vertical spacing of this and contained components.";

public const string MudInputControl_ChildContent = @"Child content of component.";

public const string MudInputControl_Class = @"User class names, separated by space";

public const string MudInputControl_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudInputControl_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudInputControl_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudInput_Disabled = @"If true, the input element will be disabled.";

public const string MudInput_ReadOnly = @"If true, the input will be read only.";

public const string MudInput_Error = @"If true, the label will be displayed in an error state.";

public const string MudInput_FullWidth = @"If true, the input will take up the full width of its container.";

public const string MudInput_DisableUnderLine = @"If true, the input will not have an underline.";

public const string MudInput_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

public const string MudInput_Placeholder = @"The short hint displayed in the input before the user enters a value.";

public const string MudInput_HelperText = @"If string has value, helpertext will be applied.";

public const string MudInput_AdornmentIcon = @"Icon that will be used if Adornment is set to Start or End.";

public const string MudInput_AdornmentText = @"Text that will be used if Adornment is set to Start or End, the Text overrides Icon.";

public const string MudInput_Adornment = @"Sets Start or End Adornment if not set to None.";

public const string MudInput_IconSize = @"Sets the Icon Size.";

public const string MudInput_OnAdornmentClick = @"Button click event if set and Adornment used.";

public const string MudInput_InputType = @"Type of the input element. It should be a valid HTML5 input type.";

public const string MudInput_Variant = @"Variant to use.";

public const string MudInput_Margin = @"Will adjust vertical spacing.";

public const string MudInput_ValueChanged = @"Fired when the Value property changes.";

public const string MudInput_Value = @"The value of this input element. This property is two-way bindable.";

public const string MudInput_Class = @"User class names, separated by space";

public const string MudInput_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudInput_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudInput_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudInputLabel_ChildContent = @"Child content of component.";

public const string MudInputLabel_Disabled = @"If true, the input element will be disabled.";

public const string MudInputLabel_ReadOnly = @"If true, the input will be read only.";

public const string MudInputLabel_Error = @"If true, the label will be displayed in an error state.";

public const string MudInputLabel_FullWidth = @"If true, the input will take up the full width of its container.";

public const string MudInputLabel_DisableUnderLine = @"If true, the input will not have an underline.";

public const string MudInputLabel_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

public const string MudInputLabel_Placeholder = @"The short hint displayed in the input before the user enters a value.";

public const string MudInputLabel_HelperText = @"If string has value, helpertext will be applied.";

public const string MudInputLabel_AdornmentIcon = @"Icon that will be used if Adornment is set to Start or End.";

public const string MudInputLabel_AdornmentText = @"Text that will be used if Adornment is set to Start or End, the Text overrides Icon.";

public const string MudInputLabel_Adornment = @"Sets Start or End Adornment if not set to None.";

public const string MudInputLabel_IconSize = @"Sets the Icon Size.";

public const string MudInputLabel_OnAdornmentClick = @"Button click event if set and Adornment used.";

public const string MudInputLabel_InputType = @"Type of the input element. It should be a valid HTML5 input type.";

public const string MudInputLabel_Variant = @"Variant to use.";

public const string MudInputLabel_Margin = @"Will adjust vertical spacing.";

public const string MudInputLabel_ValueChanged = @"Fired when the Value property changes.";

public const string MudInputLabel_Value = @"The value of this input element. This property is two-way bindable.";

public const string MudInputLabel_Class = @"User class names, separated by space";

public const string MudInputLabel_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudInputLabel_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudInputLabel_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudLink_Color = @"The color of the component. It supports the theme colors.";

public const string MudLink_Typo = @"Typography variant to use.";

public const string MudLink_Underline = @"Controls when the link should have an underline.";

public const string MudLink_Href = @"The URL, which is the actual link.";

public const string MudLink_Target = @"";

public const string MudLink_ChildContent = @"Child content of component.";

public const string MudLink_Class = @"User class names, separated by space";

public const string MudLink_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudLink_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudLink_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudList_ChildContent = @"Child content of component.";

public const string MudList_Clickable = @"Determens if the List will have clickable items.";

public const string MudList_DisablePadding = @"If true, vertical padding will be removed from the list.";

public const string MudList_Dense = @"If true, compact vertical padding will be applied to all list items.";

public const string MudList_DisableGutters = @"If true, the left and right padding is removed on all list items.";

public const string MudList_Class = @"User class names, separated by space";

public const string MudList_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudList_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudList_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudListItem_Text = @"";

public const string MudListItem_Avatar = @"Avatar to use if set.";

public const string MudListItem_Href = @"Link to a URL when clicked.";

public const string MudListItem_AvatarClass = @"Avatar CSS Class to applie if Avtar is set.";

public const string MudListItem_DisableRipple = @"If true, disables ripple effect.";

public const string MudListItem_Icon = @"Icon to use if set.";

public const string MudListItem_Inset = @"If true, the List Subheader will be indented.";

public const string MudListItem_Dense = @"If true, compact vertical padding will be used.";

public const string MudListItem_DisableGutters = @"If true, the left and right padding is removed.";

public const string MudListItem_Expanded = @"If Nested list and If Expanded true expands the nested list, otherwise collapse it.";

public const string MudListItem_CommandParameter = @"Command parameter.";

public const string MudListItem_Command = @"Command executed when the user clicks on an element.";

public const string MudListItem_ChildContent = @"";

public const string MudListItem_NestedList = @"";

public const string MudListItem_OnClick = @"List click event.";

public const string MudListItem_Class = @"User class names, separated by space";

public const string MudListItem_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudListItem_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudListItem_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudListSubheader_ChildContent = @"";

public const string MudListSubheader_DisableGutters = @"";

public const string MudListSubheader_Inset = @"";

public const string MudListSubheader_Class = @"User class names, separated by space";

public const string MudListSubheader_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudListSubheader_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudListSubheader_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string ComponentBaseMudMenu_Label = @"";

public const string ComponentBaseMudMenu_Icon = @"";

public const string ComponentBaseMudMenu_StartIcon = @"";

public const string ComponentBaseMudMenu_EndIcon = @"";

public const string ComponentBaseMudMenu_Color = @"";

public const string ComponentBaseMudMenu_Size = @"";

public const string ComponentBaseMudMenu_Variant = @"";

public const string ComponentBaseMudMenu_DisableElevation = @"";

public const string ComponentBaseMudMenu_Disabled = @"";

public const string ComponentBaseMudMenu_DisableRipple = @"";

public const string ComponentBaseMudMenu_ChildContent = @"";

public const string ComponentBaseMudMenu_ButtonType = @"The button Type (Button, Submit, Refresh)";

public const string ComponentBaseMudMenu_Link = @"If set to a URL, clicking the button will open the referenced document. Use Target to specify where";

public const string ComponentBaseMudMenu_Target = @"The target attribute specifies where to open the link, if Link is specified. Possible values: _blank | _self | _parent | _top | framename";

public const string ComponentBaseMudMenu_ForceLoad = @"If true, force browser to redirect outside component router-space.";

public const string ComponentBaseMudMenu_Command = @"Command executed when the user clicks on an element.";

public const string ComponentBaseMudMenu_CommandParameter = @"Command parameter.";

public const string ComponentBaseMudMenu_OnClick = @"Button click event.";

public const string ComponentBaseMudMenu_Class = @"User class names, separated by space";

public const string ComponentBaseMudMenu_Style = @"User styles, applied on top of the component's own classes and styles";

public const string ComponentBaseMudMenu_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string ComponentBaseMudMenu_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string ComponentBaseMudMenuItem_ChildContent = @"";

public const string ComponentBaseMudMenuItem_Disabled = @"";

public const string ComponentBaseMudMenuItem_Link = @"";

public const string ComponentBaseMudMenuItem_Target = @"";

public const string ComponentBaseMudMenuItem_ForceLoad = @"";

public const string ComponentBaseMudMenuItem_Command = @"";

public const string ComponentBaseMudMenuItem_CommandParameter = @"";

public const string ComponentBaseMudMenuItem_OnClick = @"";

public const string ComponentBaseMudMenuItem_Class = @"User class names, separated by space";

public const string ComponentBaseMudMenuItem_Style = @"User styles, applied on top of the component's own classes and styles";

public const string ComponentBaseMudMenuItem_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string ComponentBaseMudMenuItem_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudNavGroup_Title = @"";

public const string MudNavGroup_Disabled = @"";

public const string MudNavGroup_DisableRipple = @"";

public const string MudNavGroup_Expanded = @"";

public const string MudNavGroup_ChildContent = @"";

public const string MudNavGroup_Class = @"User class names, separated by space";

public const string MudNavGroup_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudNavGroup_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudNavGroup_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudNavLink_Match = @"";

public const string MudNavLink_Disabled = @"If true, the input element will be disabled.";

public const string MudNavLink_DisableRipple = @"If true, disables ripple effect.";

public const string MudNavLink_Href = @"Link to a URL when clicked.";

public const string MudNavLink_ChildContent = @"Child content of component.";

public const string MudNavLink_CommandParameter = @"Command parameter.";

public const string MudNavLink_Command = @"Command executed when the user clicks on an element.";

public const string MudNavLink_OnClick = @"";

public const string MudNavLink_Class = @"User class names, separated by space";

public const string MudNavLink_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudNavLink_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudNavLink_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudNavMenu_ChildContent = @"";

public const string MudNavMenu_Class = @"User class names, separated by space";

public const string MudNavMenu_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudNavMenu_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudNavMenu_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudPopover_Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow set to 8 by default.";

public const string MudPopover_Square = @"If true, border-radius is set to 0.";

public const string MudPopover_MaxHeight = @"Sets the maxheight the popover can have when open.";

public const string MudPopover_Open = @"If true, the popover is visible.";

public const string MudPopover_Direction = @"";

public const string MudPopover_OffsetX = @"";

public const string MudPopover_OffsetY = @"";

public const string MudPopover_ChildContent = @"Child content of the component.";

public const string MudPopover_Class = @"User class names, separated by space";

public const string MudPopover_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudPopover_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudPopover_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudRadio_Color = @"The color of the component. It supports the theme colors.";

public const string MudRadio_Placement = @"The position of the label.";

public const string MudRadio_Label = @"The text/label will be displayed next to the switch if set.";

public const string MudRadio_Option = @"";

public const string MudRadio_DisableRipple = @"If true, disables ripple effect.";

public const string MudRadio_Disabled = @"If true, the button will be disabled.";

public const string MudRadio_ChildContent = @"Child content of component.";

public const string MudRadio_Class = @"User class names, separated by space";

public const string MudRadio_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudRadio_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudRadio_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudRadioGroup_ChildContent = @"";

public const string MudRadioGroup_Name = @"";

public const string MudRadioGroup_SelectedLabelChanged = @"";

public const string MudRadioGroup_SelectedLabel = @"";

public const string MudRadioGroup_SelectedOption = @"";

public const string MudRadioGroup_SelectedOptionChanged = @"";

public const string MudRadioGroup_Class = @"User class names, separated by space";

public const string MudRadioGroup_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudRadioGroup_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudRadioGroup_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudSelect_ChildContent = @"Add the MudSelectItems here";

public const string MudSelect_Dense = @"If true, compact vertical padding will be applied to all select items.";

public const string MudSelect_OpenIcon = @"The Open Select Icon";

public const string MudSelect_CloseIcon = @"The Open Select Icon";

public const string MudSelect_SelectedValuesChanged = @"Fires when SelectedValues changes.";

public const string MudSelect_SelectedValues = @"Set of selected values. If MultiSelection is false it will only ever contain a single value. This property is two-way bindable.";

public const string MudSelect_MultiSelection = @"If true, multiple values can be selected via checkboxes which are automatically shown in the dropdown";

public const string MudSelect_MaxHeight = @"Sets the maxheight the select can have when open.";

public const string MudSelect_Direction = @"Sets the direction the select menu should be.";

public const string MudSelect_OffsetY = @"If true, the select menu will open either before or after the input.";

public const string MudSelect_OffsetX = @"";

public const string MudSelect_Disabled = @"If true, the input element will be disabled.";

public const string MudSelect_ReadOnly = @"If true, the input will be read only.";

public const string MudSelect_Error = @"If true, the label will be displayed in an error state.";

public const string MudSelect_FullWidth = @"If true, the input will take up the full width of its container.";

public const string MudSelect_DisableUnderLine = @"If true, the input will not have an underline.";

public const string MudSelect_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

public const string MudSelect_Placeholder = @"The short hint displayed in the input before the user enters a value.";

public const string MudSelect_HelperText = @"If string has value, helpertext will be applied.";

public const string MudSelect_AdornmentIcon = @"Icon that will be used if Adornment is set to Start or End.";

public const string MudSelect_AdornmentText = @"Text that will be used if Adornment is set to Start or End, the Text overrides Icon.";

public const string MudSelect_Adornment = @"Sets Start or End Adornment if not set to None.";

public const string MudSelect_IconSize = @"Sets the Icon Size.";

public const string MudSelect_OnAdornmentClick = @"Button click event if set and Adornment used.";

public const string MudSelect_InputType = @"Type of the input element. It should be a valid HTML5 input type.";

public const string MudSelect_Variant = @"Variant to use.";

public const string MudSelect_Margin = @"Will adjust vertical spacing.";

public const string MudSelect_ValueChanged = @"Fired when the Value property changes.";

public const string MudSelect_Value = @"The value of this input element. This property is two-way bindable.";

public const string MudSelect_Class = @"User class names, separated by space";

public const string MudSelect_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudSelect_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudSelect_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudSelectItem_Value = @"A user-defined option that can be selected";

public const string MudSelectItem_Disabled = @"If true, the input element will be disabled.";

public const string MudSelectItem_DisableRipple = @"If true, disables ripple effect.";

public const string MudSelectItem_Href = @"Link to a URL when clicked.";

public const string MudSelectItem_ChildContent = @"Child content of component.";

public const string MudSelectItem_CommandParameter = @"Command parameter.";

public const string MudSelectItem_Command = @"Command executed when the user clicks on an element.";

public const string MudSelectItem_OnClick = @"";

public const string MudSelectItem_Class = @"User class names, separated by space";

public const string MudSelectItem_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudSelectItem_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudSelectItem_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudSlider_Min = @"The minimum allowed value of the slider. Should not be equal to max.";

public const string MudSlider_Max = @"The maximum allowed value of the slider. Should not be equal to min.";

public const string MudSlider_Step = @"How many steps the slider should take on eatch move.";

public const string MudSlider_Disabled = @"If true, the slider will be disabled.";

public const string MudSlider_ChildContent = @"Child content of component.";

public const string MudSlider_ValueChanged = @"";

public const string MudSlider_Value = @"";

public const string MudSlider_Class = @"User class names, separated by space";

public const string MudSlider_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudSlider_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudSlider_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudSnackbarElement_Snackbar = @"";

public const string MudSnackbarElement_Class = @"User class names, separated by space";

public const string MudSnackbarElement_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudSnackbarElement_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudSnackbarElement_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudSnackbarProvider_Class = @"User class names, separated by space";

public const string MudSnackbarProvider_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudSnackbarProvider_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudSnackbarProvider_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudSwitch_Color = @"The color of the component. It supports the theme colors.";

public const string MudSwitch_Label = @"The text/label will be displayed next to the switch if set.";

public const string MudSwitch_DisableRipple = @"If true, disables ripple effect.";

public const string MudSwitch_Disabled = @"If true, the switch will be disabled.";

public const string MudSwitch_CheckedChanged = @"";

public const string MudSwitch_Checked = @"";

public const string MudSwitch_ChildContent = @"";

public const string MudSwitch_Class = @"User class names, separated by space";

public const string MudSwitch_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudSwitch_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudSwitch_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudSimpleTable_Elevation = @"Child content of component.";

public const string MudSimpleTable_Hover = @"If true, the table row will shade on hover.";

public const string MudSimpleTable_Square = @"If true, border-radius is set to 0.";

public const string MudSimpleTable_Dense = @"If true, compact padding will be used.";

public const string MudSimpleTable_Outlined = @"If true, card will be outlined.";

public const string MudSimpleTable_StickyHeader = @"";

public const string MudSimpleTable_ChildContent = @"Child content of the component.";

public const string MudSimpleTable_Class = @"User class names, separated by space";

public const string MudSimpleTable_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudSimpleTable_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudSimpleTable_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudTableBase_Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow.";

public const string MudTableBase_Square = @"Set true to disable rounded corners";

public const string MudTableBase_Outlined = @"";

public const string MudTableBase_Dense = @"Set true for rows with a narrow height";

public const string MudTableBase_Hover = @"Set true to see rows hover on mouse-over.";

public const string MudTableBase_FixedHeader = @"When true, the header will stay in place when the table is scrolled. Note: set Height to make the table scrollable.";

public const string MudTableBase_Height = @"Setting a height will allow to scroll the table. If not set, it will try to grow in height. You can set this to any CSS value that the
            attribute 'height' accepts, i.e. 500px.";

public const string MudTableBase_RowsPerPage = @"If the table has more items than this number, it will break the rows into pages of said size.
            Note: requires a MudTablePager in PagerContent.";

public const string MudTableBase_CurrentPage = @"The page index of the currently displayed page. Usually called by MudTablePager.
            Note: requires a MudTablePager in PagerContent.";

public const string MudTableBase_MultiSelection = @"Set to true to enable selection of multiple rows with check boxes.";

public const string MudTableBase_ToolBarContent = @"Optional. Add any kind of toolbar to this render fragment.";

public const string MudTableBase_HeaderContent = @"Add MudTh cells here to define the table header.";

public const string MudTableBase_PagerContent = @"Add MudTablePager here to enable breaking the rows in to multiple pages.";

public const string MudTableBase_Class = @"User class names, separated by space";

public const string MudTableBase_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudTableBase_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudTableBase_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudTablePager_DisableRowsPerPage = @"Set true to hide the part of the pager which allows to change the page size.";

public const string MudTablePager_PageSizeOptions = @"Define a list of available page size options for the user to choose from";

public const string MudTablePager_InfoFormat = @"Format string for the display of the current page, which you can localize to your language. Available variables are:
            {first_item}, {last_item} and {all_items} which will replaced with the indices of the page's first and last item as well as the total number of items.
            Default: ""{first_item}-{last_item} of {all_items}"" which is transformed into ""0-25 of 77"".";

public const string MudTablePager_RowsPerPageString = @"The localizable ""Rows per page:"" text.";

public const string MudTablePager_Class = @"User class names, separated by space";

public const string MudTablePager_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudTablePager_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudTablePager_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudTabs_Rounded = @"If true, sets the border-radius to theme default.";

public const string MudTabs_Border = @"If true, sets a border.";

public const string MudTabs_Centered = @"If true, centers the tabitems.";

public const string MudTabs_Vertical = @"If true, displays the MudTabs verticaly.";

public const string MudTabs_Elevation = @"Child content of component.";

public const string MudTabs_DisableRipple = @"If true, disables ripple effect.";

public const string MudTabs_ChildContent = @"Child content of component.";

public const string MudTabs_Class = @"User class names, separated by space";

public const string MudTabs_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudTabs_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudTabs_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudTextField_Disabled = @"If true, the input element will be disabled.";

public const string MudTextField_ReadOnly = @"If true, the input will be read only.";

public const string MudTextField_Error = @"If true, the label will be displayed in an error state.";

public const string MudTextField_FullWidth = @"If true, the input will take up the full width of its container.";

public const string MudTextField_DisableUnderLine = @"If true, the input will not have an underline.";

public const string MudTextField_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

public const string MudTextField_Placeholder = @"The short hint displayed in the input before the user enters a value.";

public const string MudTextField_HelperText = @"If string has value, helpertext will be applied.";

public const string MudTextField_AdornmentIcon = @"Icon that will be used if Adornment is set to Start or End.";

public const string MudTextField_AdornmentText = @"Text that will be used if Adornment is set to Start or End, the Text overrides Icon.";

public const string MudTextField_Adornment = @"Sets Start or End Adornment if not set to None.";

public const string MudTextField_IconSize = @"Sets the Icon Size.";

public const string MudTextField_OnAdornmentClick = @"Button click event if set and Adornment used.";

public const string MudTextField_InputType = @"Type of the input element. It should be a valid HTML5 input type.";

public const string MudTextField_Variant = @"Variant to use.";

public const string MudTextField_Margin = @"Will adjust vertical spacing.";

public const string MudTextField_ValueChanged = @"Fired when the Value property changes.";

public const string MudTextField_Value = @"The value of this input element. This property is two-way bindable.";

public const string MudTextField_Class = @"User class names, separated by space";

public const string MudTextField_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudTextField_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudTextField_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string ComponentBaseMudThemeProvider_Theme = @"";

public const string MudText_Typo = @"Applies the theme typography styles.";

public const string MudText_Align = @"Set the text-align on the component.";

public const string MudText_Color = @"The color of the component. It supports the theme colors.";

public const string MudText_GutterBottom = @"If true, the text will have a bottom margin.";

public const string MudText_ChildContent = @"Child content of component.";

public const string MudText_Inline = @"If true, Sets display inine";

public const string MudText_Class = @"User class names, separated by space";

public const string MudText_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudText_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudText_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudAvatar_Square = @"If true, border-radius is set to 0.";

public const string MudAvatar_Rounded = @"If true, border-radius is set to the themes default value.";

public const string MudAvatar_Image = @"Link to image, if set a image will be displayed instead of text.";

public const string MudAvatar_Color = @"The color of the component. It supports the theme colors.";

public const string MudAvatar_Size = @"The Size of the MudAvatar.";

public const string MudAvatar_ChildContent = @"Child content of the component.";

public const string MudAvatar_Class = @"User class names, separated by space";

public const string MudAvatar_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudAvatar_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudAvatar_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudCard_Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow.";

public const string MudCard_Square = @"If true, border-radius is set to 0.";

public const string MudCard_Outlined = @"If true, card will be outlined.";

public const string MudCard_ChildContent = @"Child content of the component.";

public const string MudCard_Class = @"User class names, separated by space";

public const string MudCard_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudCard_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudCard_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudCardActions_ChildContent = @"Child content of the component.";

public const string MudCardActions_Class = @"User class names, separated by space";

public const string MudCardActions_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudCardActions_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudCardActions_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudCardContent_ChildContent = @"Child content of the component.";

public const string MudCardContent_Class = @"User class names, separated by space";

public const string MudCardContent_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudCardContent_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudCardContent_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudCardHeader_CardHeaderAvatar = @"If used renders child content of the CardHeaderAvatar.";

public const string MudCardHeader_CardHeaderContent = @"If used renders child content of the CardHeaderContent.";

public const string MudCardHeader_CardHeaderActions = @"If used renders child content of the CardHeaderActions.";

public const string MudCardHeader_Class = @"User class names, separated by space";

public const string MudCardHeader_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudCardHeader_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudCardHeader_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudChart_InputData = @"";

public const string MudChart_InputLabels = @"";

public const string MudChart_XAxisLabels = @"";

public const string MudChart_ChartSeries = @"";

public const string MudChart_ChartType = @"The Type of the chart.";

public const string MudChart_Width = @"The Width of the chart, end with % or px.";

public const string MudChart_Height = @"The Height of the chart, end with % or px.";

public const string MudChart_LegendPosition = @"The placment direction of the legend if used.";

public const string MudChart_DisplayLegendItemValues = @"If true, the Data Values will be displayed next to the Legend Labels.";

public const string MudChart_Class = @"User class names, separated by space";

public const string MudChart_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudChart_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudChart_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudCollapse_Expanded = @"If true, expands the panel, otherwise collapse it. Setting this prop enables control over the panel.";

public const string MudCollapse_ChildContent = @"Child content of component.";

public const string MudContainer_Fixed = @"Set the max-width to match the min-width of the current breakpoint. This is useful if you'd prefer to design for a fixed set of sizes instead of trying to accommodate a fully fluid viewport. It's fluid by default.";

public const string MudContainer_MaxWidth = @"Determine the max-width of the container. The container width grows with the size of the screen. Set to false to disable maxWidth.";

public const string MudContainer_ChildContent = @"Child content of component.";

public const string MudContainer_Class = @"User class names, separated by space";

public const string MudContainer_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudContainer_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudContainer_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudDivider_Absolute = @"Sets absolute postion to the component.";

public const string MudDivider_FlexItem = @"If true, a vertical divider will have the correct height when used in flex container.";

public const string MudDivider_Light = @"If true, the divider will have a lighter color.";

public const string MudDivider_Vertical = @"If true, the divider is displayed vertically.";

public const string MudDivider_DividerType = @"The Divider type to use.";

public const string MudDivider_Class = @"User class names, separated by space";

public const string MudDivider_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudDivider_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudDivider_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudDrawer_Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow.";

public const string MudDrawer_Anchor = @"Side from which the drawer will appear.";

public const string MudDrawer_Color = @"The color of the component. It supports the theme colors.";

public const string MudDrawer_ChildContent = @"Child content of component.";

public const string MudDrawer_Class = @"User class names, separated by space";

public const string MudDrawer_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudDrawer_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudDrawer_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudDrawerHeader_ChildContent = @"Child content of component.";

public const string MudDrawerHeader_LinkToIndex = @"If true, the component will link to index page with an a element instead of div.";

public const string MudDrawerHeader_Class = @"User class names, separated by space";

public const string MudDrawerHeader_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudDrawerHeader_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudDrawerHeader_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudGrid_Spacing = @"";

public const string MudGrid_Justify = @"";

public const string MudGrid_ChildContent = @"";

public const string MudGrid_Class = @"User class names, separated by space";

public const string MudGrid_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudGrid_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudGrid_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudItem_xs = @"";

public const string MudItem_sm = @"";

public const string MudItem_md = @"";

public const string MudItem_lg = @"";

public const string MudItem_xl = @"";

public const string MudItem_ChildContent = @"";

public const string MudItem_Class = @"User class names, separated by space";

public const string MudItem_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudItem_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudItem_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudLayout_ChildContent = @"Child content of component.";

public const string MudLayout_DrawerOpen = @"Gets or ets the drawer open state.";

public const string MudLayout_DrawerClipped = @"Gets or sets the drawer clipped state.";

public const string MudLayout_Class = @"User class names, separated by space";

public const string MudLayout_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudLayout_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudLayout_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudMainContent_ChildContent = @"";

public const string MudMainContent_Class = @"User class names, separated by space";

public const string MudMainContent_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudMainContent_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudMainContent_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string Markdown_Code = @"";

public const string Markdown_Class = @"";

public const string Markdown_ChildContent = @"";

public const string MudMenu_Label = @"";

public const string MudMenu_Icon = @"";

public const string MudMenu_StartIcon = @"";

public const string MudMenu_EndIcon = @"";

public const string MudMenu_Color = @"";

public const string MudMenu_Size = @"";

public const string MudMenu_Variant = @"";

public const string MudMenu_DisableElevation = @"";

public const string MudMenu_Disabled = @"";

public const string MudMenu_DisableRipple = @"";

public const string MudMenu_ChildContent = @"";

public const string MudMenu_ButtonType = @"The button Type (Button, Submit, Refresh)";

public const string MudMenu_Link = @"If set to a URL, clicking the button will open the referenced document. Use Target to specify where";

public const string MudMenu_Target = @"The target attribute specifies where to open the link, if Link is specified. Possible values: _blank | _self | _parent | _top | framename";

public const string MudMenu_ForceLoad = @"If true, force browser to redirect outside component router-space.";

public const string MudMenu_Command = @"Command executed when the user clicks on an element.";

public const string MudMenu_CommandParameter = @"Command parameter.";

public const string MudMenu_OnClick = @"Button click event.";

public const string MudMenu_Class = @"User class names, separated by space";

public const string MudMenu_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudMenu_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudMenu_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudMenuItem_ChildContent = @"";

public const string MudMenuItem_Disabled = @"";

public const string MudMenuItem_Link = @"";

public const string MudMenuItem_Target = @"";

public const string MudMenuItem_ForceLoad = @"";

public const string MudMenuItem_Command = @"";

public const string MudMenuItem_CommandParameter = @"";

public const string MudMenuItem_OnClick = @"";

public const string MudMenuItem_Class = @"User class names, separated by space";

public const string MudMenuItem_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudMenuItem_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudMenuItem_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudPaper_Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow set to 1 by default.";

public const string MudPaper_Square = @"If true, border-radius is set to 0.";

public const string MudPaper_Outlined = @"If true, card will be outlined.";

public const string MudPaper_ChildContent = @"Child content of the component.";

public const string MudPaper_Class = @"User class names, separated by space";

public const string MudPaper_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudPaper_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudPaper_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudPicker_ChildContent = @"";

public const string MudPicker_InputIcon = @"";

public const string MudPicker_ToolBarClass = @"";

public const string MudPicker_Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow set to 8 by default in inline mode and 0 in static mode.";

public const string MudPicker_Square = @"If true, border-radius is set to 0 this is set to true automaticly in static mode but can be overridden with Rounded bool.";

public const string MudPicker_Rounded = @"If true, border-radius is set to theme default when in Static Mode.";

public const string MudPicker_HelperText = @"If string has value, helpertext will be applied.";

public const string MudPicker_Label = @"If string has value the label text will be displayed in the input, and scaled down at the top if the input has value.";

public const string MudPicker_Disabled = @"If true, the picker will be disabled.";

public const string MudPicker_DisableToolbar = @"Hide toolbar and show only date/time views.";

public const string MudPicker_PickerVariant = @"Picker container option";

public const string MudPicker_InputVariant = @"InputVariant, if Picker is static this option will not change anything.";

public const string MudPicker_Adornment = @"Sets if the icon will be att start or end, set to false to disable.";

public const string MudPicker_Orientation = @"What orientation to render in when in PickerVariant Static Mode.";

public const string MudPicker_IconSize = @"Sets the Icon Size.";

public const string MudPicker_Color = @"The color of the toolbar, selected and active. It supports the theme colors.";

public const string MudPicker_AllowKeyboardInput = @"Allows text input from keyboard.";

public const string MudPicker_ValueChanged = @"Fired when the value changes.";

public const string MudPicker_Value = @"The currently selected value represented as a string (two-way bindable)";

public const string MudPicker_Class = @"User class names, separated by space";

public const string MudPicker_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudPicker_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudPicker_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudPickerContent_Class = @"";

public const string MudPickerContent_ChildContent = @"";

public const string MudPickerToolbar_Class = @"";

public const string MudPickerToolbar_DisableToolbar = @"";

public const string MudPickerToolbar_Orientation = @"";

public const string MudPickerToolbar_Color = @"";

public const string MudPickerToolbar_ChildContent = @"";

public const string MudProgressCircular_Color = @"The color of the component. It supports the theme colors.";

public const string MudProgressCircular_Size = @"The color of the component. It supports the theme colors.";

public const string MudProgressCircular_Indeterminate = @"";

public const string MudProgressCircular_Minimum = @"";

public const string MudProgressCircular_Maximum = @"";

public const string MudProgressCircular_Value = @"";

public const string MudProgressCircular_StrokeWidth = @"";

public const string MudProgressLinear_Color = @"The color of the component. It supports the theme colors.";

public const string MudProgressLinear_Size = @"The color of the component. It supports the theme colors.";

public const string MudProgressLinear_Indeterminate = @"";

public const string MudProgressLinear_Buffer = @"";

public const string MudProgressLinear_Static = @"";

public const string MudProgressLinear_StrokeWidth = @"";

public const string MudProgressLinear_Minimum = @"";

public const string MudProgressLinear_Maximum = @"";

public const string MudProgressLinear_Value = @"";

public const string MudProgressLinear_BufferValue = @"";

public const string MudSkeleton_Width = @"With defined in string, needs px or % or equal prefix.";

public const string MudSkeleton_Height = @"Height defined in string, needs px or % or equal prefix.";

public const string MudSkeleton_SkeletonType = @"Shape of the skeleton that will be renderd.";

public const string MudSkeleton_Animation = @"Animation style, if false it will be disabled.";

public const string MudSkeleton_Class = @"User class names, separated by space";

public const string MudSkeleton_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudSkeleton_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudSkeleton_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudSparkLine_StrokeWidth = @"";

public const string MudSparkLine_Class = @"User class names, separated by space";

public const string MudSparkLine_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudSparkLine_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudSparkLine_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudTable___RowTemplate = @"Defines how a table row looks like. Use MudTd to define the table cells and their content.";

public const string MudTable___Items = @"The data to display in the table. MudTable will render one row per item";

public const string MudTable___Filter = @"A function that returns whether or not an item should be displayed in the table. You can use this to implement your own search function.";

public const string MudTable___SelectedItem = @"Returns the item which was last clicked on in single selection mode (that is, if MultiSelection is false)";

public const string MudTable___SelectedItemChanged = @"Callback is called when a row has been clicked and returns the selected item.";

public const string MudTable___SelectedItems = @"If MultiSelection is true, this returns the currently selected items. You can bind this property and the initial content of the HashSet you bind it to will cause these rows to be selected initially.";

public const string MudTable___SelectedItemsChanged = @"Callback is called whenever items are selected or deselected in multi selection mode.";

public const string MudTable___Elevation = @"The higher the number, the heavier the drop-shadow. 0 for no shadow.";

public const string MudTable___Square = @"Set true to disable rounded corners";

public const string MudTable___Outlined = @"";

public const string MudTable___Dense = @"Set true for rows with a narrow height";

public const string MudTable___Hover = @"Set true to see rows hover on mouse-over.";

public const string MudTable___FixedHeader = @"When true, the header will stay in place when the table is scrolled. Note: set Height to make the table scrollable.";

public const string MudTable___Height = @"Setting a height will allow to scroll the table. If not set, it will try to grow in height. You can set this to any CSS value that the
            attribute 'height' accepts, i.e. 500px.";

public const string MudTable___RowsPerPage = @"If the table has more items than this number, it will break the rows into pages of said size.
            Note: requires a MudTablePager in PagerContent.";

public const string MudTable___CurrentPage = @"The page index of the currently displayed page. Usually called by MudTablePager.
            Note: requires a MudTablePager in PagerContent.";

public const string MudTable___MultiSelection = @"Set to true to enable selection of multiple rows with check boxes.";

public const string MudTable___ToolBarContent = @"Optional. Add any kind of toolbar to this render fragment.";

public const string MudTable___HeaderContent = @"Add MudTh cells here to define the table header.";

public const string MudTable___PagerContent = @"Add MudTablePager here to enable breaking the rows in to multiple pages.";

public const string MudTable___Class = @"User class names, separated by space";

public const string MudTable___Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudTable___Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudTable___UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudTableSortLabel___ChildContent = @"";

public const string MudTableSortLabel___InitialDirection = @"";

public const string MudTableSortLabel___SortDirection = @"";

public const string MudTableSortLabel___SortDirectionChanged = @"";

public const string MudTableSortLabel___SortBy = @"";

public const string MudTd_ChildContent = @"";

public const string MudTh_ChildContent = @"";

public const string MudTr_ChildContent = @"";

public const string MudTr_Item = @"";

public const string MudTr_IsCheckable = @"";

public const string MudTr_IsHeader = @"";

public const string MudTr_IsCheckedChanged = @"";

public const string MudTr_IsChecked = @"";

public const string MudTabPanel_Text = @"Text will be displayed in the TabPanel as TabTitle.";

public const string MudTabPanel_Icon = @"Icon placed before the text if set.";

public const string MudTabPanel_Disabled = @"If true, the tabpanel will be disabled.";

public const string MudTabPanel_ChildContent = @"Child content of component.";

public const string MudTabPanel_Class = @"User class names, separated by space";

public const string MudTabPanel_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudTabPanel_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudTabPanel_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudThemeProvider_Theme = @"";

public const string MudToolBar_Dense = @"If true, compact padding will be used.";

public const string MudToolBar_DisableGutters = @"If true, disables gutter padding.";

public const string MudToolBar_ChildContent = @"Child content of component.";

public const string MudToolBar_Class = @"User class names, separated by space";

public const string MudToolBar_Style = @"User styles, applied on top of the component's own classes and styles";

public const string MudToolBar_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string MudToolBar_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string MudTooltip_Text = @"Sets the text to be displayed inside the tooltip.";

public const string MudTooltip_Class = @"User class names, separated by space";

public const string MudTooltip_Delayed = @"If true, sets set a delay until tooltip is showed.";

public const string MudTooltip_Placement = @"Tooltip placement.";

public const string MudTooltip_ChildContent = @"Child content of component.";

public const string MudInputAdornment_Class = @"";

public const string MudInputAdornment_Text = @"";

public const string MudInputAdornment_Icon = @"";

public const string MudInputAdornment_Edge = @"";

public const string MudInputAdornment_Size = @"";

public const string MudInputAdornment_AdornmentClick = @"";

public const string MudDialogInstance_Options = @"";

public const string MudDialogInstance_Title = @"";

public const string MudDialogInstance_Content = @"";

public const string MudDialogInstance_Id = @"";

public const string MudDialogProvider_NoHeader = @"";

public const string MudDialogProvider_CloseButton = @"";

public const string MudDialogProvider_DisableBackdropClick = @"";

public const string MudDialogProvider_Position = @"";

public const string DonutBase_InputData = @"";

public const string DonutBase_InputLabels = @"";

public const string DonutBase_XAxisLabels = @"";

public const string DonutBase_ChartSeries = @"";

public const string DonutBase_ChartType = @"The Type of the chart.";

public const string DonutBase_Width = @"The Width of the chart, end with % or px.";

public const string DonutBase_Height = @"The Height of the chart, end with % or px.";

public const string DonutBase_LegendPosition = @"The placment direction of the legend if used.";

public const string DonutBase_DisplayLegendItemValues = @"If true, the Data Values will be displayed next to the Legend Labels.";

public const string DonutBase_Class = @"User class names, separated by space";

public const string DonutBase_Style = @"User styles, applied on top of the component's own classes and styles";

public const string DonutBase_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string DonutBase_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string LineBase_InputData = @"";

public const string LineBase_InputLabels = @"";

public const string LineBase_XAxisLabels = @"";

public const string LineBase_ChartSeries = @"";

public const string LineBase_ChartType = @"The Type of the chart.";

public const string LineBase_Width = @"The Width of the chart, end with % or px.";

public const string LineBase_Height = @"The Height of the chart, end with % or px.";

public const string LineBase_LegendPosition = @"The placment direction of the legend if used.";

public const string LineBase_DisplayLegendItemValues = @"If true, the Data Values will be displayed next to the Legend Labels.";

public const string LineBase_Class = @"User class names, separated by space";

public const string LineBase_Style = @"User styles, applied on top of the component's own classes and styles";

public const string LineBase_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string LineBase_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string PieBase_InputData = @"";

public const string PieBase_InputLabels = @"";

public const string PieBase_XAxisLabels = @"";

public const string PieBase_ChartSeries = @"";

public const string PieBase_ChartType = @"The Type of the chart.";

public const string PieBase_Width = @"The Width of the chart, end with % or px.";

public const string PieBase_Height = @"The Height of the chart, end with % or px.";

public const string PieBase_LegendPosition = @"The placment direction of the legend if used.";

public const string PieBase_DisplayLegendItemValues = @"If true, the Data Values will be displayed next to the Legend Labels.";

public const string PieBase_Class = @"User class names, separated by space";

public const string PieBase_Style = @"User styles, applied on top of the component's own classes and styles";

public const string PieBase_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string PieBase_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string Donut_InputData = @"";

public const string Donut_InputLabels = @"";

public const string Donut_XAxisLabels = @"";

public const string Donut_ChartSeries = @"";

public const string Donut_ChartType = @"The Type of the chart.";

public const string Donut_Width = @"The Width of the chart, end with % or px.";

public const string Donut_Height = @"The Height of the chart, end with % or px.";

public const string Donut_LegendPosition = @"The placment direction of the legend if used.";

public const string Donut_DisplayLegendItemValues = @"If true, the Data Values will be displayed next to the Legend Labels.";

public const string Donut_Class = @"User class names, separated by space";

public const string Donut_Style = @"User styles, applied on top of the component's own classes and styles";

public const string Donut_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string Donut_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string Line_InputData = @"";

public const string Line_InputLabels = @"";

public const string Line_XAxisLabels = @"";

public const string Line_ChartSeries = @"";

public const string Line_ChartType = @"The Type of the chart.";

public const string Line_Width = @"The Width of the chart, end with % or px.";

public const string Line_Height = @"The Height of the chart, end with % or px.";

public const string Line_LegendPosition = @"The placment direction of the legend if used.";

public const string Line_DisplayLegendItemValues = @"If true, the Data Values will be displayed next to the Legend Labels.";

public const string Line_Class = @"User class names, separated by space";

public const string Line_Style = @"User styles, applied on top of the component's own classes and styles";

public const string Line_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string Line_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

public const string Pie_InputData = @"";

public const string Pie_InputLabels = @"";

public const string Pie_XAxisLabels = @"";

public const string Pie_ChartSeries = @"";

public const string Pie_ChartType = @"The Type of the chart.";

public const string Pie_Width = @"The Width of the chart, end with % or px.";

public const string Pie_Height = @"The Height of the chart, end with % or px.";

public const string Pie_LegendPosition = @"The placment direction of the legend if used.";

public const string Pie_DisplayLegendItemValues = @"If true, the Data Values will be displayed next to the Legend Labels.";

public const string Pie_Class = @"User class names, separated by space";

public const string Pie_Style = @"User styles, applied on top of the component's own classes and styles";

public const string Pie_Tag = @"Use Tag to attach any user data object to the component for your convenience.";

public const string Pie_UserAttributes = @"UserAttributes carries all attributes you add to the component that don't match any of its parameters. They
            will be splatted onto the underlying HTML tag.";

    }
}

